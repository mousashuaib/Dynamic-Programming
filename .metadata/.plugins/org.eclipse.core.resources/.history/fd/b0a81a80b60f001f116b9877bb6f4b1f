package application;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

import javafx.application.Application;
import javafx.beans.binding.StringBinding;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.ComboBox;
import javafx.scene.layout.*;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;
import javafx.scene.effect.DropShadow;
import javafx.scene.input.MouseEvent;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;

public class HelloApplication extends Application {

	private static VBox vboxLabels;
	private static int n = 0;
	private static String[] city;
	private static int stage[];
	private static String startCity;
	private static String endCity;
	private static int t;
	private static int numCities;
	private static MyHashMap<String, MyLinkedList<City>> adjacencyLists = new MyHashMap<>();
	private static int[][] cost;
	private static String[][] Citydp;
	private static TextArea ta = new TextArea();

	// *****************************readFile********************************//

	public static void readFile() {
		FileChooser chooser = new FileChooser();
		File inputFile = chooser.showOpenDialog(new Stage());
		Scanner scanner = null;
		try {
			scanner = new Scanner(inputFile);
		} catch (FileNotFoundException e) {
		}
		numCities = Integer.parseInt(scanner.nextLine());
		String[] startEnd = scanner.nextLine().split(",");
		city = new String[numCities];
		startCity = startEnd[0];
		endCity = startEnd[1];
		stage = new int[numCities];
		stage[0] = 0;
		// Read the adjacency lists of cities
		int constant = 0;
		for (int i = 0; i < numCities - 1; i++) {
			String[] line = scanner.nextLine().split(", ");
			String cityName = line[0];
			MyLinkedList<City> adjacentCities = new MyLinkedList<>();
			city[i] = cityName;
			if (i == constant) {
				t++;
				for (int count = 0; count < line.length - 1; count++) {
					stage[++n] = t;
					constant++;
				}
			}
			for (int j = 1; j < line.length; j++) {
				String[] cityInfo = line[j].replace("[", "").replace("]", "").split(",");
				String adjacentCity = cityInfo[0].trim();
				int petrolCost = Integer.parseInt(cityInfo[1].trim());
				int hotelCost = Integer.parseInt(cityInfo[2].trim().replace("]", ""));
				adjacentCities.add(new City(adjacentCity, petrolCost, hotelCost));
			}
			adjacencyLists.put(cityName, adjacentCities);
			city[n] = endCity;
			stage[n] = t;
			cost = new int[numCities][numCities];
			Citydp = new String[numCities][numCities];
			Citydp[numCities - 1][numCities - 1] = endCity;
			cost[numCities - 1][numCities - 1] = 0;
		}
	}
	// *****************************clear********************************//

	public static void clear() {
		cost = new int[numCities][numCities];
		cost[numCities - 1][numCities - 1] = 0;
	}

	// *****************************fillTableLabel********************************//

	private static void fillTableLabel() {
		clear();
		StringBuilder sr = new StringBuilder();
		Label labelStage = new Label(); 
		for (int i = 0; i < stage.length; i++) {
			if (i == 0)
				sr.append("\t\t" + stage[i] + "\t");// Horizantal Stage number

			else
				sr.append("\t" + stage[i] + "\t");
		}
		labelStage.setText(sr.toString());
		labelStage.setAlignment(Pos.CENTER_LEFT);
		labelStage.setMinWidth(1000);
		labelStage.setMaxWidth(1000);
		HBox hboxStage = new HBox(labelStage);
		hboxStage.setAlignment(Pos.CENTER_LEFT);
		hboxStage.setMinWidth(1000);
		hboxStage.setMaxWidth(1000);
		String[] str = new String[city.length];
		for (int i = 0; i < city.length; i++) {
			str[i] = ("\n" + city[i]);// virtical cities

		}
		str[city.length - 1] += "\t" + cost[numCities - 1][numCities - 1] + "" + Citydp[numCities - 1][numCities - 1];// Ending
																														// City
		for (int i = numCities - 2; i >= 0; i--) {
			MyLinkedList<City> LI = adjacencyLists.get(city[i]);
			for (int j = i + 1; j < numCities; j++) {
				if (stage[i] + 1 == stage[numCities - 1]) {
					if (stage[i] != stage[j]) {
						cost[i][j] = LI.get(0).getHotelCost() + LI.get(0).getPetrolCost();
						str[i] += " " + cost[i][j];// Cities that lead to the Ending City
					}
				} else {
					if (stage[i] + 1 == stage[j]) {
						for (int k = 0; k < LI.size(); k++) {
							cost[i][j] = LI.get(k).getHotelCost() + LI.get(k).getPetrolCost();
							str[i] += " " + cost[i][j];// Ways that don't lead to the end
							j++;
						}
						j--;
					} else {
						for (int k = j; stage[k] > stage[i]; k--) {
							if (stage[k] != stage[j] && stage[k] + 1 == stage[j]) {
								if (cost[i][j] > 0) {// to find optimal solution
									if (cost[i][j] > cost[i][k] + cost[k][j]) {
										Citydp[i][j] = city[k];
									} else if (cost[i][j] == cost[i][k] + cost[k][j]) {
										Citydp[i][j] = city[k] + "," + Citydp[i][j];
									}
									cost[i][j] = Math.min(cost[i][j], cost[i][k] + cost[k][j]);
									String[] array = str[i].split(" ");
									System.out.println(str[i]);
									str[i] = "";
									for (int n = 0; n < array.length - 1; n++) {
										str[i] += " " + array[n];
									}
									str[i] += " " + cost[i][j] + "" + Citydp[i][j];
								} else {// to find a first solution
									cost[i][j] = cost[i][k] + cost[k][j];
									Citydp[i][j] = city[k];
									str[i] += " " + cost[i][j] + "" + Citydp[i][j];// No Duplicant but not final
																					// solution
									String[] array = str[i].split(" ");
									str[i] = "";
									for (int n = 0; n < array.length - 1; n++) {
										str[i] += " " + array[n];
									}
									str[i] += " " + cost[i][j] + "" + Citydp[i][j];
								}
							}
						}
					}
				}
			}
		}
		Label labelcity = new Label();
		StringBuilder srcity = new StringBuilder();
		for (int i = 0; i < city.length; i++) {
			if (i == 0)
				srcity.append("\t\t" + city[i] + "\t");
			else
				srcity.append("\t" + city[i] + "\t");
		}
		labelcity.setText(srcity.toString());
		labelcity.setAlignment(Pos.CENTER_LEFT);
		labelcity.setMinWidth(1000);
		labelcity.setMaxWidth(1000);
		HBox hboxcity = new HBox(labelcity);
		hboxcity.setAlignment(Pos.CENTER_LEFT);
		hboxcity.setMinWidth(1000);
		hboxcity.setMaxWidth(1000);
		vboxLabels = new VBox(5, hboxStage, hboxcity);
		for (int i = 0; i < str.length; i++) {
			String[] temp = str[i].replaceAll("\\s+", " ").split(" ");
			str[i] = "\n" + temp[1] + "\t";
			int naCounter = temp.length - 2;
			while (naCounter < numCities) {
				str[i] += "\t\t" + "  " + "\t";
				naCounter++;
			}
			for (int j = 2; j < temp.length; j++) {
				str[i] += "\t" + temp[j] + "\t";
			}
		}
		Label[] label = new Label[str.length];
		HBox[] hbox = new HBox[str.length];
		for (int i = 0; i < str.length; i++) {
			label[i] = new Label();
			label[i].setPrefWidth(1000);
			label[i].setText(str[i]);
			label[i].setAlignment(Pos.CENTER_LEFT);
			label[i].setWrapText(true);

			label[i].setMinWidth(1000);
			label[i].setMaxWidth(1000);
			hbox[i] = new HBox(label[i]);
			hbox[i].setMinWidth(1000);
			hbox[i].setMaxWidth(1000);
			hbox[i].setAlignment(Pos.CENTER_LEFT);
		}
		vboxLabels.getChildren().addAll(hbox);
		vboxLabels.setAlignment(Pos.CENTER_LEFT);

	}

	// *****************************details********************************//
	public static BorderPane details() {
		BorderPane root = new BorderPane();
		// Title
		Label title = new Label("Optimal Solution For Travel");
		title.setStyle("-fx-font-size: 24px; -fx-font-weight: bold;");
		HBox titleBox = new HBox(10, title);
		titleBox.setAlignment(Pos.CENTER);
		titleBox.setPadding(new Insets(20));
		root.setTop(titleBox);
		// Information
		Label infoLabel = new Label("COST " + startCity + " to " + endCity);
		infoLabel.setStyle("-fx-font-size: 16px; -fx-text-fill: #333333;");
		HBox infoBox = new HBox(infoLabel);
		infoBox.setAlignment(Pos.CENTER);
		infoBox.setPadding(new Insets(20));
		// Details
		fillAnswer();
		HBox hb2 = new HBox(10, ta);
		hb2.setAlignment(Pos.CENTER);
		hb2.setPadding(new Insets(0, 0, 0, 30));
		// Know label
		Label know = new Label("COST " + startCity + " to " + endCity);
		know.setStyle("-fx-font-size: 16px; -fx-text-fill: #333333;");
		HBox hb = new HBox(10, know);
		hb.setAlignment(Pos.CENTER);
		hb.setPadding(new Insets(0, 0, 0, 50));
		// VBox for Know and Details
		VBox vbox = new VBox(10, hb, hb2);
		vbox.setAlignment(Pos.CENTER);
		// Apply green background color to the root and vbox

		root.setCenter(vbox);
		return root;
	}

	// *****************************start********************************//
	@Override
	public void start(Stage primaryStage) {
		readFile();
		BorderPane root = new BorderPane();
		ComboBox<String> combo = new ComboBox<>();
		combo.getItems().addAll("Table", "Routes");
		root.setTop(combo);
		Scene scene = new Scene(root, 880, 650);
		primaryStage.setFullScreen(false);
		primaryStage.setTitle("TABLE & MinimamCost");
		primaryStage.setScene(scene);
		primaryStage.show();
		combo.getSelectionModel().select(0);
		root.setCenter(table());
		fillTableLabel();
		combo.setOnAction(e -> {
			if (combo.getSelectionModel().getSelectedIndex() == 0) {
				root.setCenter(table());
			} else {
				root.setCenter(details());
			}
		});

	}
	// *****************************table********************************//

	public static BorderPane table() {
		BorderPane root = new BorderPane();
		fillTableLabel();
		root.setCenter(vboxLabels);
		return root;
	}
	// *****************************fillAnswer********************************//

	public static void fillAnswer() {
		String[] s = Citydp[0][Citydp.length - 1].trim().split(",");
		for (int h = 0; h < s.length; h++) {
			String str = s[h] + "," + endCity;
			for (int j = Citydp.length - 2; j > 0; j--) {
				if (city[j].equals(s[h])) {
					if (Citydp[0][j] != null) {
						String st = str;
						str = Citydp[0][j] + "," + st;
						s[h] = Citydp[0][j];
					}
				}
			}
			String st = str;
			str = startCity + "," + st;
			if (h == 0) {
				ta.setText("The expected result:  ");
				ta.setText(ta.getText() + str);
				ta.setText(ta.getText() + "              Cost:" + cost[0][numCities - 1] + "\n" + "\n");
			} else {
				ta.setText(ta.getText() + "The alternatives result_" + h + ":  ");
				ta.setText(ta.getText() + str);
				ta.setText(ta.getText() + "              Cost:" + cost[0][numCities - 1] + "\n" + "\n");

			}
		}
	}

	// *****************************Main********************************//
	public static void main(String[] args) {
		launch(args);
	}
}

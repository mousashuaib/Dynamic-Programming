package application;

public class MyHashMap<K, V> {
	private static final int DEFAULT_CAPACITY = 16;
	private MyLinkedList<Entry<K, V>>[] buckets;
	private int size;

	public MyHashMap() {
		this(DEFAULT_CAPACITY);
	}

	public MyHashMap(int capacity) {
		buckets = new MyLinkedList[capacity];
		for (int i = 0; i < capacity; i++) {
			buckets[i] = new MyLinkedList<>();
		}
		size = 0;
	}

	public void put(K key, V value) {
		if (key == null)
			return;

		int hash = key.hashCode() % buckets.length;
		MyLinkedList<Entry<K, V>> bucket = buckets[hash];

		for (Entry<K, V> entry : bucket) {
			if (entry.getKey().equals(key)) {
				entry.setValue(value);
				return;
			}
		}

		bucket.add(new Entry<>(key, value));
		size++;
	}

	public V get(K key) {
		if (key == null)
			return null;

		int hash = key.hashCode() % buckets.length;
		MyLinkedList<Entry<K, V>> bucket = buckets[hash];

		for (Entry<K, V> entry : bucket) {
			if (entry.getKey().equals(key)) {
				return entry.getValue();
			}
		}

		return null;
	}

	public int size() {
		return size;
	}

	private static class Entry<K, V> {
		private final K key;
		private V value;

		public Entry(K key, V value) {
			this.key = key;
			this.value = value;
		}

		public K getKey() {
			return key;
		}

		public V getValue() {
			return value;
		}

		public void setValue(V value) {
			this.value = value;
		}
	}
}
